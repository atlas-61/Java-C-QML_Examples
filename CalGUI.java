/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package xsanca02;

//import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author mumtaz
 */
public class CalGUI extends javax.swing.JFrame {

         double firstvalue, secondvalue, result;
         String operator, answer, fraction = "%.0f";
        String [] resultmem = new String[100];
        String [] expressionsmem = new String[100];
        int memindex = 0, maxindex = 0;
        
        
    /**
     * Creates new form CalGUI
     */
    public CalGUI() {
        initComponents();
        setLocationRelativeTo(null);
        Advance.setVisible(false);
        Memory.setVisible(false);
        
    }

    public void ResMem (String result){
        if (maxindex < resultmem.length){
        for (int counter = 0; counter < resultmem.length; counter++){
            if ( resultmem[counter] == null){
                resultmem[counter] = result;
                memindex++;
                break;
            }
        }
        }
        else{
            for(int counter = 0; counter < resultmem.length -1; counter++){
                resultmem[counter] = resultmem[counter + 1];
            }
            resultmem[resultmem.length - 1] = result;
        }
            
    }
    
    public void ExpMem (String expression){
        if (maxindex < expressionsmem.length){
          for (int counter = 0; counter < expressionsmem .length; counter++){
            if ( expressionsmem [counter] == null){
                expressionsmem [counter] = expression;
                maxindex++;
                break;
            }
        }
        }
        else{
            for(int counter = 0; counter < expressionsmem.length -1; counter++){
                expressionsmem[counter] = expressionsmem[counter + 1];
            }
            expressionsmem[expressionsmem.length - 1] = expression;
        }
    }
    public void GetMem (){
        Double answer;
        if ( memindex != 0){
            if( operator == null){
                InputOutput.setText(resultmem[memindex - 1]);
                LastValue.setText(expressionsmem[memindex - 1]);
                LastValue.setToolTipText(LastValue.getText());
                memindex--;
        }
            else{
                InputOutput.setText(resultmem[memindex - 1]);
                memindex--;
            }
        }       
        else{
           if ( operator == null){
            if (maxindex != 0){
            InputOutput.setText(resultmem[maxindex - 1]);
            LastValue.setText(expressionsmem[maxindex - 1]);
            LastValue.setToolTipText(LastValue.getText());
            memindex = maxindex - 1;
            }
            else{
            InputOutput.setText(resultmem[maxindex]);
            LastValue.setText(expressionsmem[maxindex]);
            LastValue.setToolTipText(LastValue.getText());
            memindex = maxindex;
                
            }}
           else{
            if (maxindex != 0){
            InputOutput.setText(resultmem[maxindex - 1]);
            memindex = maxindex - 1;
            }
            else{
            InputOutput.setText(resultmem[maxindex]);
            memindex = maxindex;    
            }
           }
        }
    
}
    public void SetMem (String s_answer, String s_exp){
        memindex = maxindex;
        ResMem(s_answer);
        ExpMem(s_exp);
        MemoryLight.setForeground(new java.awt.Color(76, 175, 80));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Zero = new javax.swing.JButton();
        Sign = new javax.swing.JButton();
        Point = new javax.swing.JButton();
        Two = new javax.swing.JButton();
        One = new javax.swing.JButton();
        Three = new javax.swing.JButton();
        Four = new javax.swing.JButton();
        Six = new javax.swing.JButton();
        Five = new javax.swing.JButton();
        Seven = new javax.swing.JButton();
        Eight = new javax.swing.JButton();
        Nine = new javax.swing.JButton();
        Product = new javax.swing.JButton();
        Plus = new javax.swing.JButton();
        Divide = new javax.swing.JButton();
        Minus = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Modulo = new javax.swing.JButton();
        Equal = new javax.swing.JButton();
        Basic = new javax.swing.JPanel();
        EraseText = new javax.swing.JButton();
        Options = new javax.swing.JToggleButton();
        EraseMem = new javax.swing.JButton();
        NumForm = new javax.swing.JToggleButton();
        UpArrow = new javax.swing.JLabel();
        DownArrow = new javax.swing.JLabel();
        MemoryLight = new javax.swing.JLabel();
        MainPanel = new javax.swing.JPanel();
        Advance = new javax.swing.JPanel();
        Sinus = new javax.swing.JButton();
        Cosinus = new javax.swing.JButton();
        Log = new javax.swing.JButton();
        Exp = new javax.swing.JButton();
        Cotangent = new javax.swing.JButton();
        Tangent = new javax.swing.JButton();
        NatLog = new javax.swing.JButton();
        PI = new javax.swing.JButton();
        E_Num = new javax.swing.JButton();
        sqrt = new javax.swing.JButton();
        minuspow = new javax.swing.JButton();
        factorial = new javax.swing.JButton();
        DecPoint = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        DecimalOutput = new javax.swing.JTextField();
        DecOutput = new javax.swing.JButton();
        AddInput = new javax.swing.JButton();
        HexF = new javax.swing.JButton();
        HexA = new javax.swing.JButton();
        HexB = new javax.swing.JButton();
        HexC = new javax.swing.JButton();
        HexD = new javax.swing.JButton();
        HexE = new javax.swing.JButton();
        InputOutput = new javax.swing.JTextField();
        LastValue = new javax.swing.JLabel();
        Memory = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Awesome Calculator");
        setBackground(java.awt.Color.darkGray);
        setMaximumSize(new java.awt.Dimension(532, 400));
        setMinimumSize(new java.awt.Dimension(370, 400));
        setPreferredSize(new java.awt.Dimension(370, 400));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Zero.setBackground(new java.awt.Color(224, 224, 224));
        Zero.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Zero.setText("0");
        Zero.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeroActionPerformed(evt);
            }
        });
        getContentPane().add(Zero, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 304, 64, 64));

        Sign.setBackground(new java.awt.Color(224, 224, 224));
        Sign.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Sign.setText("Â±");
        Sign.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Sign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignActionPerformed(evt);
            }
        });
        getContentPane().add(Sign, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 304, 64, 64));

        Point.setBackground(new java.awt.Color(224, 224, 224));
        Point.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Point.setText(".");
        Point.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Point.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointActionPerformed(evt);
            }
        });
        getContentPane().add(Point, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 304, 64, 64));

        Two.setBackground(new java.awt.Color(224, 224, 224));
        Two.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Two.setText("2");
        Two.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TwoActionPerformed(evt);
            }
        });
        getContentPane().add(Two, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 234, 64, 64));

        One.setBackground(new java.awt.Color(224, 224, 224));
        One.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        One.setText("1");
        One.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        One.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OneActionPerformed(evt);
            }
        });
        getContentPane().add(One, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 234, 64, 64));

        Three.setBackground(new java.awt.Color(224, 224, 224));
        Three.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Three.setText("3");
        Three.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThreeActionPerformed(evt);
            }
        });
        getContentPane().add(Three, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 234, 64, 64));

        Four.setBackground(new java.awt.Color(224, 224, 224));
        Four.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Four.setText("4");
        Four.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FourActionPerformed(evt);
            }
        });
        getContentPane().add(Four, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 164, 64, 64));

        Six.setBackground(new java.awt.Color(224, 224, 224));
        Six.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Six.setText("6");
        Six.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SixActionPerformed(evt);
            }
        });
        getContentPane().add(Six, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 164, 64, 64));

        Five.setBackground(new java.awt.Color(224, 224, 224));
        Five.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Five.setText("5");
        Five.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiveActionPerformed(evt);
            }
        });
        getContentPane().add(Five, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 164, 64, 64));

        Seven.setBackground(new java.awt.Color(224, 224, 224));
        Seven.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Seven.setText("7");
        Seven.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SevenActionPerformed(evt);
            }
        });
        getContentPane().add(Seven, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 94, 64, 64));

        Eight.setBackground(new java.awt.Color(224, 224, 224));
        Eight.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Eight.setText("8");
        Eight.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EightActionPerformed(evt);
            }
        });
        getContentPane().add(Eight, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 94, 64, 64));

        Nine.setBackground(new java.awt.Color(224, 224, 224));
        Nine.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Nine.setText("9");
        Nine.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NineActionPerformed(evt);
            }
        });
        getContentPane().add(Nine, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 94, 64, 64));

        Product.setBackground(new java.awt.Color(224, 224, 224));
        Product.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Product.setText("x");
        Product.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Product.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductActionPerformed(evt);
            }
        });
        getContentPane().add(Product, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 94, 64, 64));

        Plus.setBackground(new java.awt.Color(224, 224, 224));
        Plus.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Plus.setText("+");
        Plus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlusActionPerformed(evt);
            }
        });
        getContentPane().add(Plus, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 164, 64, 64));

        Divide.setBackground(new java.awt.Color(224, 224, 224));
        Divide.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Divide.setText("Ã·");
        Divide.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DivideActionPerformed(evt);
            }
        });
        getContentPane().add(Divide, new org.netbeans.lib.awtextra.AbsoluteConstraints(292, 94, 64, 64));

        Minus.setBackground(new java.awt.Color(224, 224, 224));
        Minus.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Minus.setText("-");
        Minus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinusActionPerformed(evt);
            }
        });
        getContentPane().add(Minus, new org.netbeans.lib.awtextra.AbsoluteConstraints(292, 164, 64, 64));

        Delete.setBackground(new java.awt.Color(229, 115, 115));
        Delete.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        Delete.setText("DEL");
        Delete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        Delete.setName(""); // NOI18N
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        getContentPane().add(Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(292, 234, 64, 64));

        Modulo.setBackground(new java.awt.Color(224, 224, 224));
        Modulo.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        Modulo.setText("MOD");
        Modulo.setToolTipText("Modulo");
        Modulo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Modulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModuloActionPerformed(evt);
            }
        });
        getContentPane().add(Modulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 234, 64, 64));

        Equal.setBackground(new java.awt.Color(129, 199, 132));
        Equal.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        Equal.setText("=");
        Equal.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        Equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EqualActionPerformed(evt);
            }
        });
        getContentPane().add(Equal, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 304, 134, 64));

        Basic.setOpaque(false);
        Basic.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        EraseText.setBackground(new java.awt.Color(224, 224, 224));
        EraseText.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        EraseText.setForeground(java.awt.Color.red);
        EraseText.setText("C");
        EraseText.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        EraseText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EraseTextActionPerformed(evt);
            }
        });
        Basic.add(EraseText, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, 64, -1));

        Options.setBackground(new java.awt.Color(255, 241, 118));
        Options.setText("BSC");
        Options.setToolTipText("Basic/ Advance Mods");
        Options.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        Options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionsActionPerformed(evt);
            }
        });
        Basic.add(Options, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 64, -1));

        EraseMem.setBackground(new java.awt.Color(224, 224, 224));
        EraseMem.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        EraseMem.setForeground(java.awt.Color.blue);
        EraseMem.setText("CE");
        EraseMem.setToolTipText("Clear Everything");
        EraseMem.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        EraseMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EraseMemActionPerformed(evt);
            }
        });
        Basic.add(EraseMem, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 64, -1));

        NumForm.setBackground(new java.awt.Color(255, 183, 77));
        NumForm.setText("DEC");
        NumForm.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        NumForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumFormActionPerformed(evt);
            }
        });
        Basic.add(NumForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 64, -1));

        UpArrow.setForeground(new java.awt.Color(238, 238, 238));
        UpArrow.setText("â²");
        Basic.add(UpArrow, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, -1));

        DownArrow.setForeground(new java.awt.Color(238, 238, 238));
        DownArrow.setText("â¼");
        Basic.add(DownArrow, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        MemoryLight.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        MemoryLight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MemoryLight.setText("M");
        MemoryLight.setToolTipText("Memory");
        Basic.add(MemoryLight, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 80, 20));

        getContentPane().add(Basic, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 350, 320));

        MainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        MainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Advance.setOpaque(false);

        Sinus.setBackground(new java.awt.Color(224, 224, 224));
        Sinus.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        Sinus.setText("SIN");
        Sinus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Sinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SinusActionPerformed(evt);
            }
        });

        Cosinus.setBackground(new java.awt.Color(224, 224, 224));
        Cosinus.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        Cosinus.setText("COS");
        Cosinus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Cosinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CosinusActionPerformed(evt);
            }
        });

        Log.setBackground(new java.awt.Color(224, 224, 224));
        Log.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        Log.setText("LOG");
        Log.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogActionPerformed(evt);
            }
        });

        Exp.setBackground(new java.awt.Color(224, 224, 224));
        Exp.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        Exp.setText("EXP");
        Exp.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Exp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExpActionPerformed(evt);
            }
        });

        Cotangent.setBackground(new java.awt.Color(224, 224, 224));
        Cotangent.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        Cotangent.setText("COT");
        Cotangent.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Cotangent.setPreferredSize(new java.awt.Dimension(64, 64));
        Cotangent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CotangentActionPerformed(evt);
            }
        });

        Tangent.setBackground(new java.awt.Color(224, 224, 224));
        Tangent.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        Tangent.setText("TAN");
        Tangent.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Tangent.setPreferredSize(new java.awt.Dimension(64, 64));
        Tangent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TangentActionPerformed(evt);
            }
        });

        NatLog.setBackground(new java.awt.Color(224, 224, 224));
        NatLog.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        NatLog.setText("LN");
        NatLog.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        NatLog.setPreferredSize(new java.awt.Dimension(64, 64));
        NatLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NatLogActionPerformed(evt);
            }
        });

        PI.setBackground(new java.awt.Color(224, 224, 224));
        PI.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        PI.setText("Ï");
        PI.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        PI.setPreferredSize(new java.awt.Dimension(64, 64));
        PI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PIActionPerformed(evt);
            }
        });

        E_Num.setBackground(new java.awt.Color(224, 224, 224));
        E_Num.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        E_Num.setText("e");
        E_Num.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        E_Num.setPreferredSize(new java.awt.Dimension(64, 64));
        E_Num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E_NumActionPerformed(evt);
            }
        });

        sqrt.setBackground(new java.awt.Color(224, 224, 224));
        sqrt.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        sqrt.setText("â");
        sqrt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        sqrt.setPreferredSize(new java.awt.Dimension(64, 64));
        sqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqrtActionPerformed(evt);
            }
        });

        minuspow.setBackground(new java.awt.Color(224, 224, 224));
        minuspow.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        minuspow.setText(" x^(-1)");
        minuspow.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        minuspow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minuspowActionPerformed(evt);
            }
        });

        factorial.setBackground(new java.awt.Color(224, 224, 224));
        factorial.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        factorial.setText("x!");
        factorial.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        factorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factorialActionPerformed(evt);
            }
        });

        DecPoint.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        DecPoint.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Fraction", "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        DecPoint.setToolTipText("");
        DecPoint.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        DecPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecPointActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Decimal Places:");

        DecimalOutput.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        DecimalOutput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        DecimalOutput.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));
        DecimalOutput.setDisabledTextColor(java.awt.Color.black);
        DecimalOutput.setEnabled(false);

        DecOutput.setBackground(new java.awt.Color(186, 104, 200));
        DecOutput.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        DecOutput.setText("DEC ->");
        DecOutput.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        DecOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecOutputActionPerformed(evt);
            }
        });

        AddInput.setBackground(new java.awt.Color(186, 104, 200));
        AddInput.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        AddInput.setText("ADD ");
        AddInput.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        AddInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AdvanceLayout = new javax.swing.GroupLayout(Advance);
        Advance.setLayout(AdvanceLayout);
        AdvanceLayout.setHorizontalGroup(
            AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdvanceLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdvanceLayout.createSequentialGroup()
                        .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(DecOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddInput, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DecimalOutput))
                    .addGroup(AdvanceLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DecPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AdvanceLayout.createSequentialGroup()
                        .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AdvanceLayout.createSequentialGroup()
                                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NatLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Tangent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AdvanceLayout.createSequentialGroup()
                                        .addComponent(PI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(E_Num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(AdvanceLayout.createSequentialGroup()
                                        .addComponent(Cotangent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sqrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(AdvanceLayout.createSequentialGroup()
                                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(AdvanceLayout.createSequentialGroup()
                                        .addComponent(Sinus, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Cosinus, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(AdvanceLayout.createSequentialGroup()
                                        .addComponent(Exp, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Log, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(factorial, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(minuspow, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        AdvanceLayout.setVerticalGroup(
            AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdvanceLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DecPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NatLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(E_Num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Tangent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Cotangent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sqrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minuspow, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cosinus, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Sinus, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Log, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Exp, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(factorial, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AdvanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdvanceLayout.createSequentialGroup()
                        .addComponent(DecOutput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddInput))
                    .addComponent(DecimalOutput))
                .addContainerGap())
        );

        MainPanel.add(Advance, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 50, 220, 390));

        HexF.setBackground(new java.awt.Color(224, 224, 224));
        HexF.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        HexF.setText("F");
        HexF.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        HexF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HexFActionPerformed(evt);
            }
        });
        MainPanel.add(HexF, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 410, 64, -1));

        HexA.setBackground(new java.awt.Color(224, 224, 224));
        HexA.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        HexA.setText("A");
        HexA.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        HexA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HexAActionPerformed(evt);
            }
        });
        MainPanel.add(HexA, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 64, -1));

        HexB.setBackground(new java.awt.Color(224, 224, 224));
        HexB.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        HexB.setText("B");
        HexB.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        HexB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HexBActionPerformed(evt);
            }
        });
        MainPanel.add(HexB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 380, 64, -1));

        HexC.setBackground(new java.awt.Color(224, 224, 224));
        HexC.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        HexC.setText("C");
        HexC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        HexC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HexCActionPerformed(evt);
            }
        });
        MainPanel.add(HexC, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, 64, -1));

        HexD.setBackground(new java.awt.Color(224, 224, 224));
        HexD.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        HexD.setText("D");
        HexD.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        HexD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HexDActionPerformed(evt);
            }
        });
        MainPanel.add(HexD, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 380, 64, -1));

        HexE.setBackground(new java.awt.Color(224, 224, 224));
        HexE.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        HexE.setText("E");
        HexE.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        HexE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HexEActionPerformed(evt);
            }
        });
        MainPanel.add(HexE, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 380, 64, -1));

        InputOutput.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        InputOutput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        InputOutput.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, javax.swing.UIManager.getDefaults().getColor("Button.darkShadow"), java.awt.Color.black, javax.swing.UIManager.getDefaults().getColor("Button.darkShadow")));
        InputOutput.setMaximumSize(new java.awt.Dimension(40, 510));
        InputOutput.setMinimumSize(new java.awt.Dimension(40, 340));
        InputOutput.setPreferredSize(new java.awt.Dimension(196, 40));
        InputOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputOutputActionPerformed(evt);
            }
        });
        InputOutput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                InputOutputKeyTyped(evt);
            }
        });
        MainPanel.add(InputOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));
        InputOutput.getAccessibleContext().setAccessibleDescription("");

        LastValue.setToolTipText("");
        LastValue.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                LastValueMouseWheelMoved(evt);
            }
        });
        LastValue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LastValueMouseExited(evt);
            }
        });
        MainPanel.add(LastValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 120, 40));

        Memory.setBackground(new java.awt.Color(224, 224, 224));
        Memory.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        Memory.setForeground(java.awt.Color.orange);
        Memory.setText("ANS");
        Memory.setToolTipText("Memory");
        Memory.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.white, java.awt.Color.white));
        Memory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MemoryActionPerformed(evt);
            }
        });
        MainPanel.add(Memory, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 64, -1));

        getContentPane().add(MainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 440));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionsActionPerformed
        // TODO add your handling code here:
        int Height = getHeight();
        if (Advance.isVisible()){
            Advance.setVisible(false);
            Options.setText("BSC");
            setSize(new java.awt.Dimension(370, Height));
            InputOutput.setPreferredSize(new java.awt.Dimension(196, 40));
        }
        else{
            Advance.setVisible(true);
            Options.setText("ADV");
            setSize(new java.awt.Dimension(588, Height));
            InputOutput.setPreferredSize(new java.awt.Dimension(420, 40));
        }
    }//GEN-LAST:event_OptionsActionPerformed

    private void NumFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumFormActionPerformed
        // TODO add your handling code here:
        int Width = getWidth();
        if( "DEC".equals(NumForm.getText())){
            NumForm.setText("HEX");
            setSize(new java.awt.Dimension(Width, 470));
            Point.setEnabled(false);
            factorial.setEnabled(false);
        }
        else{
            NumForm.setText("DEC");
            setSize(new java.awt.Dimension(Width, 400));
            Point.setEnabled(true);
            factorial.setEnabled(true);
        }
    }//GEN-LAST:event_NumFormActionPerformed

    private void ZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeroActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Zero.getText();
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_ZeroActionPerformed

    private void OneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OneActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + One.getText();
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_OneActionPerformed

    private void TwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TwoActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Two.getText();
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_TwoActionPerformed

    private void ThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThreeActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Three.getText();
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_ThreeActionPerformed

    private void FourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FourActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Four.getText();
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_FourActionPerformed

    private void FiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiveActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Five.getText();
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_FiveActionPerformed

    private void SixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SixActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Six.getText();
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_SixActionPerformed

    private void SevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SevenActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Seven.getText();
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_SevenActionPerformed

    private void EightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EightActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Eight.getText();
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_EightActionPerformed

    private void NineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NineActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Nine.getText();
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_NineActionPerformed

    private void HexAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HexAActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Double.toHexString(10);
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_HexAActionPerformed

    private void HexBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HexBActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Double.toHexString(11);
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_HexBActionPerformed

    private void HexCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HexCActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Double.toHexString(12);
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_HexCActionPerformed

    private void HexDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HexDActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Double.toHexString(13);
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_HexDActionPerformed

    private void HexEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HexEActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Double.toHexString(14);
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_HexEActionPerformed

    private void HexFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HexFActionPerformed
        // TODO add your handling code here:
        String InputNumber = InputOutput.getText() + Double.toHexString(15);
        InputOutput.setText(InputNumber); 
    }//GEN-LAST:event_HexFActionPerformed

    private void EraseTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EraseTextActionPerformed
        // TODO add your handling code here:
        InputOutput.setText(null);
        LastValue.setText(null);
        LastValue.setToolTipText(null);
        DecimalOutput.setText(null);
        if ( null != operator)
             switch (operator) {
                 case "+":
                     Plus.setBackground(new Color(232,232,232));
                     break;
                 case "-":
                     Minus.setBackground(new Color(232,232,232));
                     break;
                 case "*":
                     Product.setBackground(new Color(232,232,232));
                     break;
                 case "/":
                     Divide.setBackground(new Color(232,232,232));
                     break;
                 case "%":
                     Modulo.setBackground(new Color(232,232,232));
                     break;
                 default:
                     break;
             }
        
        operator = null;
    }//GEN-LAST:event_EraseTextActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        String delete = null;
         if(InputOutput.getText().length() > 0){
            StringBuilder strB = new StringBuilder(InputOutput.getText());
            strB.deleteCharAt(InputOutput.getText().length() - 1);
            delete = strB.toString();
            InputOutput.setText(delete);
        }
       else if ( operator != null){
            if ( null != operator)
            switch (operator) {
                case "+":
                    Plus.setBackground(new Color(232,232,232));
                    break;
                case "-":
                    Minus.setBackground(new Color(232,232,232));
                    break;
                case "*":
                    Product.setBackground(new Color(232,232,232));
                    break;
                case "/":
                    Divide.setBackground(new Color(232,232,232));
                    break;
                case "%":
                    Modulo.setBackground(new Color(232,232,232));
                    break;
                default:
                    break;
            }
            
         StringBuilder strB = new StringBuilder(LastValue.getText());
            strB.deleteCharAt(LastValue.getText().length() - 1);
            delete = strB.toString();
            LastValue.setText(delete);
            InputOutput.setText(LastValue.getText());
            LastValue.setText(null);
            operator = null;
            delete = null;
            
        }
       
    }//GEN-LAST:event_DeleteActionPerformed

    private void PIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PIActionPerformed
        // TODO add your handling code here:
       if( operator == null){
           LastValue.setText(null);
        if ( "DEC".equals(NumForm.getText()))
            InputOutput.setText(String.valueOf(String.format(fraction,Math.PI)));
        else
            InputOutput.setText(String.valueOf(Double.toHexString(Math.PI)));
       }
       else{
        if ( "DEC".equals(NumForm.getText()))
            InputOutput.setText(String.valueOf(String.format(fraction,Math.PI)));
        else
            InputOutput.setText(String.valueOf(Double.toHexString(Math.PI)));
       }
    }//GEN-LAST:event_PIActionPerformed

    private void PointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointActionPerformed
        // TODO add your handling code here:
        if(! InputOutput.getText().contains(".")) { 
            if( InputOutput.getText().length() == 0)
                InputOutput.setText("0" + Point.getText());
            else
                InputOutput.setText(InputOutput.getText() + Point.getText());
        }
    }//GEN-LAST:event_PointActionPerformed

    private void SignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignActionPerformed
        // TODO add your handling code here:
        String positive;
        if(! InputOutput.getText().contains("-")){
            InputOutput.setText("-" + InputOutput.getText());
        }
        else{
            StringBuilder strB = new StringBuilder(InputOutput.getText());
            strB.deleteCharAt(0);
            positive = strB.toString();
            InputOutput.setText(positive);
        }
    }//GEN-LAST:event_SignActionPerformed

    private void PlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlusActionPerformed
        // TODO add your handling code here:
        try{
        operator = "+";
        LastValue.setText(InputOutput.getText() + operator);
        firstvalue = Double.parseDouble(InputOutput.getText());
        InputOutput.setText(null);
        Plus.setBackground(new Color(176,196,222));
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
        
    }//GEN-LAST:event_PlusActionPerformed

    private void ProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductActionPerformed
        // TODO add your handling code here:
        try{
        operator = "*";
        LastValue.setText(InputOutput.getText() + operator);
        firstvalue = Double.parseDouble(InputOutput.getText());    
        InputOutput.setText(null);
        Product.setBackground(new Color(176,196,222));
        }
        catch ( NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_ProductActionPerformed

    private void MinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinusActionPerformed
        // TODO add your handling code here:
        try{
        operator = "-";
        LastValue.setText(InputOutput.getText() + operator);
        firstvalue = Double.parseDouble(InputOutput.getText());
        InputOutput.setText(null);
        Minus.setBackground(new Color(176,196,222));
        }
        catch ( NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_MinusActionPerformed

    private void DivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DivideActionPerformed
        // TODO add your handling code here:
        try{
        operator = "/";
        LastValue.setText(InputOutput.getText() + "Ã·");
        firstvalue = Double.parseDouble(InputOutput.getText());
        InputOutput.setText(null);
        Divide.setBackground(new Color(176,196,222));
        }
        catch ( NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_DivideActionPerformed

    private void ModuloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModuloActionPerformed
        // TODO add your handling code here:
        try{
        operator = "%";
        LastValue.setText(InputOutput.getText() + operator);
        firstvalue = Double.parseDouble(InputOutput.getText());
        InputOutput.setText(null);
        Modulo.setBackground(new Color(176,196,222));
        }
        catch ( NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_ModuloActionPerformed

    private void EqualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EqualActionPerformed
        // TODO add your handling code here:
        String answer = null;
        
        try{
        secondvalue = Double.parseDouble(InputOutput.getText());
        if(LastValue.getText().contains("=")){
            
        }
        else{
            LastValue.setText( LastValue.getText() + InputOutput.getText() + " =");
            LastValue.setToolTipText(LastValue.getText());
        if (null != operator)switch (operator) {
                case "+":
                    result = firstvalue + secondvalue;
                    if(NumForm.getText().equals("DEC"))
                        answer = String.format(fraction, result);
                    else
                        answer = Double.toHexString(result);
                    InputOutput.setText(answer);
                    Plus.setBackground(new Color(232,232,232));
                    break;
                case "-":
                    result = firstvalue - secondvalue;
                    if(NumForm.getText().equals("DEC"))
                        answer = String.format(fraction, result);
                    else
                        answer = Double.toHexString(result);
                    InputOutput.setText(answer);
                    Minus.setBackground(new Color(232,232,232));
                    break;
                case "*":
                    result = firstvalue * secondvalue;
                    if(NumForm.getText().equals("DEC"))
                        answer = String.format(fraction, result);
                    else
                        answer = Double.toHexString(result);
                    InputOutput.setText(answer);
                    Product.setBackground(new Color(232,232,232));
                    break;
                case "/":
                    if (secondvalue != 0){
                        result = firstvalue / secondvalue;
                        if(NumForm.getText().equals("DEC"))
                            answer = String.format(fraction, result);
                        else
                            answer = Double.toHexString(result);
                        InputOutput.setText(answer);
                        Divide.setBackground(new Color(232,232,232));
                    }
                    else{
                        EraseText.doClick();
                        JOptionPane.showMessageDialog(null, "Division by zero undefined!");
                        
                    }       break;
                case "%":
                    result = firstvalue % secondvalue;
                    if(NumForm.getText().equals("DEC"))
                        answer = String.format(fraction, result);
                    else
                        answer = Double.toHexString(result);
                    InputOutput.setText(answer);
                    Modulo.setBackground(new Color(232,232,232));
                    break;
                default:
                    break;
            }
        operator = null;
        SetMem(answer, LastValue.getText());
        }
        }
        catch ( Exception e){
            JOptionPane.showMessageDialog(null, "Missing value!");
            EraseText.doClick();  
        }
        
        
    }//GEN-LAST:event_EqualActionPerformed

    private void SinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SinusActionPerformed
        // TODO add your handling code here:
        String answer;
        try{
        if( operator == null){
            LastValue.setText("sin(" + InputOutput.getText() + ")" + " =");
            LastValue.setToolTipText(LastValue.getText());
            firstvalue = Double.parseDouble(InputOutput.getText());
            result = Math.sin(Math.toRadians(firstvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
            SetMem(answer, LastValue.getText());
        }
        else{
            secondvalue = Double.parseDouble(InputOutput.getText());
            result = Math.sin(Math.toRadians(secondvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
        }
        }
        catch ( NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
            
        }
        
    }//GEN-LAST:event_SinusActionPerformed

    private void CosinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CosinusActionPerformed
        // TODO add your handling code here:
        String answer;
        try{
        if( operator == null){
            LastValue.setText("cos(" + InputOutput.getText() + ")" + " =");
            LastValue.setToolTipText(LastValue.getText());
            firstvalue = Double.parseDouble(InputOutput.getText());
            result = Math.cos(Math.toRadians(firstvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
            SetMem(answer, LastValue.getText());
        }
        else{
            secondvalue = Double.parseDouble(InputOutput.getText());
            result = Math.cos(Math.toRadians(secondvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
        }
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_CosinusActionPerformed

    private void TangentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TangentActionPerformed
        // TODO add your handling code here:
        String answer;
        try{
        if( operator == null){
        LastValue.setText("tan(" + InputOutput.getText() + ")" + " =");
        LastValue.setToolTipText(LastValue.getText());
        firstvalue = Double.parseDouble(InputOutput.getText());
        result = Math.tan(Math.toRadians(firstvalue));
        if(NumForm.getText().equals("DEC"))
            answer = String.format(fraction, result);
        else
            answer = Double.toHexString(result);
        InputOutput.setText(answer);
        SetMem(answer, LastValue.getText());
        }
        else{
            secondvalue = Double.parseDouble(InputOutput.getText());
            LastValue.setToolTipText(LastValue.getText());
            result = Math.tan(Math.toRadians(secondvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
        }
        }
        catch ( NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_TangentActionPerformed

    private void CotangentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CotangentActionPerformed
        // TODO add your handling code here:
        String answer;
        try{
        if( operator == null){
            LastValue.setText("cot(" + InputOutput.getText() + ")" + " =");
            LastValue.setToolTipText(LastValue.getText());
            firstvalue = Double.parseDouble(InputOutput.getText());
            result = 1.0 / Math.tan(Math.toRadians(firstvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
            SetMem(answer, LastValue.getText());
        }
        else{
            secondvalue = Double.parseDouble(InputOutput.getText());
            result = 1.0 / Math.tan(Math.toRadians(secondvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
        }
        }
        catch ( NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_CotangentActionPerformed

    private void NatLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NatLogActionPerformed
        // TODO add your handling code here:
        String answer;
        try{
        if( operator == null){
            LastValue.setText("ln(" + InputOutput.getText() + ")" + " =");
            LastValue.setToolTipText(LastValue.getText());
            firstvalue = Double.parseDouble(InputOutput.getText());
            result = Math.log((firstvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
            SetMem(answer, LastValue.getText());
        }
        else{
            secondvalue = Double.parseDouble(InputOutput.getText());
            result = Math.log(secondvalue);
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
        }
        }
        catch ( NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_NatLogActionPerformed

    private void LogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogActionPerformed
        // TODO add your handling code here:
        String answer;
        try{
        if( operator == null){
            LastValue.setText("log(" + InputOutput.getText() + ")" + " =");
            LastValue.setToolTipText(LastValue.getText());
            firstvalue = Double.parseDouble(InputOutput.getText());
            result = Math.log((firstvalue)) / Math.log(2);
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
            SetMem(answer, LastValue.getText());
        }
        else{
            secondvalue = Double.parseDouble(InputOutput.getText());
            result = Math.log((secondvalue)) / Math.log(2);
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
        }
        }
        catch ( NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_LogActionPerformed

    private void ExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpActionPerformed
        // TODO add your handling code here:
        String answer;
        try{
        if( operator == null){
            LastValue.setText("e^" + InputOutput.getText() + " =");
            LastValue.setToolTipText(LastValue.getText());
            firstvalue = Double.parseDouble(InputOutput.getText());
            result = Math.exp((firstvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
            SetMem(answer, LastValue.getText());
        }
        else{
            secondvalue = Double.parseDouble(InputOutput.getText());
            result = Math.exp((secondvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
        }
        }
        catch ( NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick(); 
        }
    }//GEN-LAST:event_ExpActionPerformed

    private void MemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MemoryActionPerformed
        // TODO add your handling code here:
        GetMem();
        if(NumForm.getText().equals("HEX"))
            DecOutput.doClick();
        
    }//GEN-LAST:event_MemoryActionPerformed

    private void EraseMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EraseMemActionPerformed
        // TODO add your handling code here:
        resultmem = new String[resultmem.length];
        expressionsmem = new String[expressionsmem.length];
        MemoryLight.setForeground(Color.black);
        memindex = 0; maxindex = 0;
        EraseText.doClick();
    }//GEN-LAST:event_EraseMemActionPerformed

    private void E_NumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_E_NumActionPerformed
        // TODO add your handling code here:
        if( operator == null){
           LastValue.setText(null);
        if ( "DEC".equals(NumForm.getText()))
            InputOutput.setText(String.valueOf(String.format(fraction,Math.E)));
        else
            InputOutput.setText(String.valueOf(Double.toHexString(Math.E)));
       }
       else{
        if ( "DEC".equals(NumForm.getText()))
            InputOutput.setText(String.valueOf(String.format(fraction,Math.E)));
        else
            InputOutput.setText(String.valueOf(Double.toHexString(Math.E)));
       }
    }//GEN-LAST:event_E_NumActionPerformed

    private void sqrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqrtActionPerformed
        // TODO add your handling code here:
         String answer;
        try{
        if( operator == null){
            LastValue.setText("sqrt(" + InputOutput.getText() + ")" + " =");
            LastValue.setToolTipText(LastValue.getText());
            firstvalue = Double.parseDouble(InputOutput.getText());
            if ( firstvalue >= 0){
            result = Math.sqrt((firstvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
            SetMem(answer, LastValue.getText());
            }
            else{
                InputOutput.setText("Value can not be less than zero!");
            }
        }
        else{
            secondvalue = Double.parseDouble(InputOutput.getText());
            if( secondvalue >= 0){
            result = Math.sqrt((secondvalue));
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
            }
            else{
                JOptionPane.showMessageDialog(null, "Value can not be less than zero!");
            }
        }
        }
        catch ( HeadlessException | NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_sqrtActionPerformed

    private void minuspowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minuspowActionPerformed
        // TODO add your handling code here:
         String answer;
        try{
        if( operator == null){
            LastValue.setText(InputOutput.getText() + "^(-1)" + " =");
            LastValue.setToolTipText(LastValue.getText());
            firstvalue = Double.parseDouble(InputOutput.getText());
            if ( firstvalue != 0){
            result = 1.0 / firstvalue;
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
            SetMem(answer, LastValue.getText());
            }
            else{
                InputOutput.setText("Value can not be equal zero!");
            }
        }
        else{
            secondvalue = Double.parseDouble(InputOutput.getText());
            if ( secondvalue != 0){
            result = 1.0 / secondvalue;
            if(NumForm.getText().equals("DEC"))
                answer = String.format(fraction, result);
            else
                answer = Double.toHexString(result);
            InputOutput.setText(answer);
            }
            else
                JOptionPane.showMessageDialog(null, "Value can not be equal zero!");
        }
        }
        catch ( HeadlessException | NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_minuspowActionPerformed

    private void factorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factorialActionPerformed
        // TODO add your handling code here:
         String answer;
        try{
        if( operator == null){
            LastValue.setText(InputOutput.getText() + "!" + " =");
            LastValue.setToolTipText(LastValue.getText());
            firstvalue = Integer.parseInt(InputOutput.getText());
            if ( firstvalue > 0){
                for(int i =  (int) (firstvalue - 1) ; i > 1; i--) 
                    firstvalue = firstvalue * i;
            result = firstvalue;
            answer = String.format(fraction, result);
            InputOutput.setText(answer);
            SetMem(answer, LastValue.getText());
            }
            else if ( firstvalue == 0){
            result = 1.0;
            answer = String.format(fraction, result);
            InputOutput.setText(answer);
            SetMem(answer, LastValue.getText());
            }
            else{
                InputOutput.setText("Value can not be less than zero!");
            }
        }
        else{
            secondvalue = Integer.parseInt(InputOutput.getText());
            if ( secondvalue > 0){
            for(int i =  (int) (secondvalue - 1) ; i > 1; i--) 
                    secondvalue = secondvalue * i;
            result =  secondvalue;
            answer = String.format(fraction, result);
            InputOutput.setText(answer);
            }
            else if ( secondvalue == 0){
            result =  1.0;
            answer = String.format(fraction, result);
            InputOutput.setText(answer);  
            }
            else
                JOptionPane.showMessageDialog(null, "Value can not be less than zero!");
        }
        }
        catch ( HeadlessException | NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number!");
            EraseText.doClick();
        }
    }//GEN-LAST:event_factorialActionPerformed

    private void DecPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecPointActionPerformed
        // TODO add your handling code here:
        int index = DecPoint.getSelectedIndex();
             switch (index) {
                 case 0:
                     fraction = "%.0f";
                     break;
                 case 1:
                     fraction = "%.1f";
                     break;
                 case 2:
                     fraction = "%.2f";
                     break;
                 case 3:
                     fraction = "%.3f";
                     break;
                 case 4:
                     fraction = "%.4f";
                     break;
                 case 5:
                     fraction = "%.5f";
                     break;
                 case 6:
                     fraction = "%.6f";
                     break;
                 case 7:
                     fraction = "%.7f";
                     break;
                 case 8:
                     fraction = "%.8f";
                     break;
                 case 9:
                     fraction = "%.9f";
                     break;
                 default:
                     break;
             }
        
    }//GEN-LAST:event_DecPointActionPerformed

    private void InputOutputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputOutputKeyTyped
        // TODO add your handling code here:
        char ch = evt.getKeyChar();
      if(!(Character.isDigit(ch) || ch == KeyEvent.VK_BACK_SPACE)){
          evt.consume();
          if (NumForm.getText().equals("DEC")){
          switch (ch) {
                case '+':
                    Plus.doClick();
                    break;
                case '-':
                    Minus.doClick();
                    break;
                case '*':
                    Product.doClick();
                    break;
                case '/':
                    Divide.doClick();
                    break;
                case '%':
                    Modulo.doClick();
                    break;
                case 127:
                    Delete.doClick();
                    break;
                case '.':
                    Point.doClick();
                    break;
                case 'm':
                case 'M':
                    Memory.doClick();
                    break;
                case 'x':
                case 'X':
                    EraseText.doClick();
                    break;
                default:
                    break;
            }}
          else{
              switch (ch) {
                case '+':
                    Plus.doClick();
                    break;
                case '-':
                    Minus.doClick();
                    break;
                case '*':
                    Product.doClick();
                    break;
                case '/':
                    Divide.doClick();
                    break;
                case '%':
                    Modulo.doClick();
                    break;
                case 127:
                    Delete.doClick();
                    break;
                case 'm':
                case 'M':
                    Memory.doClick();
                    break;
                case 'x':
                case 'X':
                    EraseText.doClick();
                    break;
                case 'a':
                case 'A':
                      HexA.doClick();
                    break;  
                case 'b':
                case 'B':
                      HexB.doClick();
                      break;
                case 'c':
                case 'C':
                      HexC.doClick();
                      break;
                case 'd':
                case 'D':
                      HexD.doClick();
                      break;
                case 'e':
                case 'E':
                      HexE.doClick();
                      break;
                case 'f':
                case 'F':
                      HexF.doClick();
                      break;
                default:
                    break;
              
          }}
      }
       
        
      
    }//GEN-LAST:event_InputOutputKeyTyped

    private void InputOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputOutputActionPerformed
        // TODO add your handling code here:
        Equal.doClick();
    }//GEN-LAST:event_InputOutputActionPerformed

    private void DecOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecOutputActionPerformed
        // TODO add your handling code here:
        try{
        DecimalOutput.setText(String.format(fraction, (Double.parseDouble(InputOutput.getText()))));
        }
        catch ( Exception e){
            
        }
    }//GEN-LAST:event_DecOutputActionPerformed

    private void AddInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddInputActionPerformed
        // TODO add your handling code here:
        try{
            InputOutput.setText(DecimalOutput.getText());
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_AddInputActionPerformed

    private void LastValueMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_LastValueMouseWheelMoved
        // TODO add your handling code here:
      if( evt.getWheelRotation() < 0 ){
          Memory.doClick();
          DownArrow.setForeground(new java.awt.Color(238, 238, 238));
          UpArrow.setForeground(new java.awt.Color(76, 175, 80));
      }
      else{
          if(memindex < maxindex){
          memindex+=2;
          Memory.doClick();
          UpArrow.setForeground(new java.awt.Color(238, 238, 238));
          DownArrow.setForeground(new java.awt.Color(76, 175, 80));
          }
         
      }
        
    }//GEN-LAST:event_LastValueMouseWheelMoved

    private void LastValueMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LastValueMouseExited
        // TODO add your handling code here:
        UpArrow.setForeground(new java.awt.Color(238, 238, 238));
        DownArrow.setForeground(new java.awt.Color(238, 238, 238));
    }//GEN-LAST:event_LastValueMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CalGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddInput;
    private javax.swing.JPanel Advance;
    private javax.swing.JPanel Basic;
    private javax.swing.JButton Cosinus;
    private javax.swing.JButton Cotangent;
    private javax.swing.JButton DecOutput;
    private javax.swing.JComboBox<String> DecPoint;
    private javax.swing.JTextField DecimalOutput;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Divide;
    private javax.swing.JLabel DownArrow;
    private javax.swing.JButton E_Num;
    private javax.swing.JButton Eight;
    private javax.swing.JButton Equal;
    private javax.swing.JButton EraseMem;
    private javax.swing.JButton EraseText;
    private javax.swing.JButton Exp;
    private javax.swing.JButton Five;
    private javax.swing.JButton Four;
    private javax.swing.JButton HexA;
    private javax.swing.JButton HexB;
    private javax.swing.JButton HexC;
    private javax.swing.JButton HexD;
    private javax.swing.JButton HexE;
    private javax.swing.JButton HexF;
    public javax.swing.JTextField InputOutput;
    public javax.swing.JLabel LastValue;
    private javax.swing.JButton Log;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton Memory;
    private javax.swing.JLabel MemoryLight;
    private javax.swing.JButton Minus;
    private javax.swing.JButton Modulo;
    private javax.swing.JButton NatLog;
    private javax.swing.JButton Nine;
    private javax.swing.JToggleButton NumForm;
    private javax.swing.JButton One;
    private javax.swing.JToggleButton Options;
    private javax.swing.JButton PI;
    private javax.swing.JButton Plus;
    private javax.swing.JButton Point;
    private javax.swing.JButton Product;
    private javax.swing.JButton Seven;
    private javax.swing.JButton Sign;
    private javax.swing.JButton Sinus;
    private javax.swing.JButton Six;
    private javax.swing.JButton Tangent;
    private javax.swing.JButton Three;
    private javax.swing.JButton Two;
    private javax.swing.JLabel UpArrow;
    private javax.swing.JButton Zero;
    private javax.swing.JButton factorial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton minuspow;
    private javax.swing.JButton sqrt;
    // End of variables declaration//GEN-END:variables
}
